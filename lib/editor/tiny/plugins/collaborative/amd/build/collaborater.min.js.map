{"version":3,"file":"collaborater.min.js","sources":["../src/collaborater.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n/**\n * Storage helper for the Moodle Tiny Autosave plugin.\n *\n * @module      tiny_autosave/autosaver\n * @copyright   2022 Andrew Lyons <andrew@nicols.co.uk>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\n//import * as Options from './options';\n//import * as Storage from './storage';mm\n//import Log from 'core/log';\n//import {eventTypes} from 'core_form/events';\n//import {getLogSource} from './common';\nimport * as jsDiff from './jsdiff/index';\nimport {call} from 'core/ajax';\nimport * as Options from \"./options\";\n\n\nlet currentContent = '';\nlet currentHash = '';\nlet newHash = '';\n//let newContent = '';\n//let lastHash = '';\nconst INTERVALTIMEOUT = 1000;\nconst HEADER = \"Index: a\\n===================================================================\\n\";\n\nconst fetchOne = (methodname, args) => call([{\n    methodname,\n    args,\n}])[0];\nlet intervalId = null;\n\nasync function sha1(message) {\n    const encoder = new TextEncoder();\n    const data = encoder.encode(message);\n    const hashBuffer = await crypto.subtle.digest('SHA-1', data);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashHex = hashArray.map(byte => byte.toString(16).padStart(2, '0')).join('');\n    return hashHex;\n}\n\n// Example usage:\nconst insertCursorMarker = (editor) => {\n    const markerId = 'cursor-marker-' + new Date().getTime();\n    editor.selection.collapse();\n    editor.selection.setContent(`<span id=\"${markerId}\"></span>`);\n    return markerId;\n};\nconst restoreCursorPositionFromMarker = (editor, markerId) => {\n    const markerElement = editor.getBody().querySelector(`#${markerId}`);\n    if (markerElement) {\n        const range = editor.dom.createRng();\n        range.setStartAfter(markerElement);\n        range.collapse(true);\n        editor.selection.setRng(range);\n        editor.dom.remove(markerElement); // Clean up marker\n       // editor.focus();\n    } else {\n        // Fallback if marker not found\n       // editor.focus();\n        editor.selection.select(editor.getBody(), true);\n        editor.selection.collapse(false);\n    }\n};\n\n\nexport const register = (editor) => {\n        // Attempt to store the draft one final time before the page unloads.\n    // Note: This may need to be sent as a beacon instead.\n   // document.addEventListener('visibilitychange', visibilityChangedHandler);\n\n    // When the page is submitted as a form, remove the draft.\n   // editor.on('submit', removeAutoSaveSession);\n   // document.addEventListener(eventTypes.formSubmittedByJavascript, handleFormSubmittedByJavascript);\n    const c = window.console;\n    editor.on('init', () => {\n        let status_bar_element = document.createElement(\"p\");\n        const txt = document.createTextNode(\"Collaboratiny initialized.\");\n        status_bar_element.appendChild(txt);\n\n        editor\n            .getElement()\n            .nextElementSibling\n            .getElementsByClassName(\"tox-statusbar__right-container\")[0]\n            .prepend(status_bar_element);\n\n        let x = 0;\n        setInterval(() => {\n            const newContent = editor.getContent();\n            sha1(newContent).then(hash => {\n                newHash = hash;\n                if (currentHash === '') {\n                    currentContent = newContent;\n                    currentHash = newHash;\n                    return;\n                }\n                if (newHash !== currentHash) {\n                    let patch = jsDiff.createPatch('a', currentContent, newContent);\n                    patch = patch.substring(HEADER.length);\n                    return fetchOne('tiny_collaborate_save_changes', {\n                        contextid: Options.getContextId(editor),\n                        elementid: editor.targetElm.id,\n                        oldcontenthash: currentHash,\n                        newcontenthash: newHash,\n                        changes: patch,\n\n                    })\n                    .then((result) => {\n                        currentContent = newContent;\n                        currentHash = newHash;\n                        return result;\n                    });\n                }\n            });\n            if (currentHash === '') {\n                return;\n            }\n\n            let newContent2 = editor.getContent();\n            fetchOne('tiny_collaborate_get_changes', {\n                contextid: Options.getContextId(editor),\n                elementid: editor.targetElm.id,\n                currenthash: currentHash,\n            }).then((result) => {\n                if (result) {\n                    let changesMade = false;\n                    const changes = result.changes;\n                    c.log(changes);\n                    for (const change of changes) {\n\n                        c.log('shorthcange', change);\n                        let patch = HEADER + change;\n                        c.log('changes', patch);\n                        c.log('parsedPatch', jsDiff.parsePatch(patch));\n                        newContent2 = jsDiff.applyPatch(newContent2, patch);\n                        changesMade = true;\n                    }\n                    if (changesMade) {\n                        if (newContent2 === false) {\n                            c.log('Patch FAILED');\n                        } else {\n                            c.log('newContent2', newContent2);\n                            editor.setContent(newContent2);\n                            currentContent = newContent2;\n                            sha1(newContent2).then(hash => {\n                                currentHash = hash;\n                                c.log('new hash', currentHash);\n                            });\n                        }\n                    }\n                    status_bar_element.innerText = \"Collaborators: \" + result.positions.length;\n\n                    //clearInterval(intervalId);\n                }\n\n             //   restoreCursorPositionFromMarker(editor, markerId);\n            });\n\n        }, INTERVALTIMEOUT);\n\n        /*editor.on('Change', (event) => {\n            c.log('Change collaborative', event);\n        });*/\n        // Setup the Undo handler.\n        //editor.on('AddUndo', undoHandler);\n\n       /* if (editor.dom.isEmpty(editor.getBody())) {\n            Log.info(`Attempting to restore draft`, getLogSource(editor));\n            Storage.restoreDraft(editor);\n        } else {\n            // There was nothing to restore, so we can mark the editor as initialised.\n            Log.warn(`Skipping draft restoration. The editor is not empty.`, getLogSource(editor));\n            Options.markInitialised(editor);\n        }*/\n    });\n};\n"],"names":["currentContent","currentHash","newHash","HEADER","fetchOne","methodname","args","sha1","message","data","TextEncoder","encode","hashBuffer","crypto","subtle","digest","Array","from","Uint8Array","map","byte","toString","padStart","join","editor","c","window","console","on","status_bar_element","document","createElement","txt","createTextNode","appendChild","getElement","nextElementSibling","getElementsByClassName","prepend","setInterval","newContent","getContent","then","hash","patch","jsDiff","createPatch","substring","length","contextid","Options","getContextId","elementid","targetElm","id","oldcontenthash","newcontenthash","changes","result","newContent2","currenthash","changesMade","log","change","parsePatch","applyPatch","setContent","innerText","positions"],"mappings":";;;;;;;0KAiCIA,eAAiB,GACjBC,YAAc,GACdC,QAAU,SAIRC,OAAS,kFAETC,SAAW,CAACC,WAAYC,QAAS,cAAK,CAAC,CACzCD,WAAAA,WACAC,KAAAA,QACA,kBAGWC,KAAKC,eAEVC,MADU,IAAIC,aACCC,OAAOH,SACtBI,iBAAmBC,OAAOC,OAAOC,OAAO,QAASN,aACrCO,MAAMC,KAAK,IAAIC,WAAWN,aAClBO,KAAIC,MAAQA,KAAKC,SAAS,IAAIC,SAAS,EAAG,OAAMC,KAAK,sBA6B1DC,eAQfC,EAAIC,OAAOC,QACjBH,OAAOI,GAAG,QAAQ,SACVC,mBAAqBC,SAASC,cAAc,WAC1CC,IAAMF,SAASG,eAAe,8BACpCJ,mBAAmBK,YAAYF,KAE/BR,OACKW,aACAC,mBACAC,uBAAuB,kCAAkC,GACzDC,QAAQT,oBAGbU,aAAY,WACFC,WAAahB,OAAOiB,gBAC1BlC,KAAKiC,YAAYE,MAAKC,UAClBzC,QAAUyC,KACU,KAAhB1C,mBACAD,eAAiBwC,gBACjBvC,YAAcC,YAGdA,UAAYD,YAAa,KACrB2C,MAAQC,OAAOC,YAAY,IAAK9C,eAAgBwC,mBACpDI,MAAQA,MAAMG,UAAU5C,OAAO6C,QACxB5C,SAAS,gCAAiC,CAC7C6C,UAAWC,QAAQC,aAAa3B,QAChC4B,UAAW5B,OAAO6B,UAAUC,GAC5BC,eAAgBtD,YAChBuD,eAAgBtD,QAChBuD,QAASb,QAGZF,MAAMgB,SACH1D,eAAiBwC,WACjBvC,YAAcC,QACPwD,cAIC,KAAhBzD,uBAIA0D,YAAcnC,OAAOiB,aACzBrC,SAAS,+BAAgC,CACrC6C,UAAWC,QAAQC,aAAa3B,QAChC4B,UAAW5B,OAAO6B,UAAUC,GAC5BM,YAAa3D,cACdyC,MAAMgB,YACDA,OAAQ,KACJG,aAAc,QACZJ,QAAUC,OAAOD,QACvBhC,EAAEqC,IAAIL,aACD,MAAMM,UAAUN,QAAS,CAE1BhC,EAAEqC,IAAI,cAAeC,YACjBnB,MAAQzC,OAAS4D,OACrBtC,EAAEqC,IAAI,UAAWlB,OACjBnB,EAAEqC,IAAI,cAAejB,OAAOmB,WAAWpB,QACvCe,YAAcd,OAAOoB,WAAWN,YAAaf,OAC7CiB,aAAc,EAEdA,eACoB,IAAhBF,YACAlC,EAAEqC,IAAI,iBAENrC,EAAEqC,IAAI,cAAeH,aACrBnC,OAAO0C,WAAWP,aAClB3D,eAAiB2D,YACjBpD,KAAKoD,aAAajB,MAAKC,OACnB1C,YAAc0C,KACdlB,EAAEqC,IAAI,WAAY7D,kBAI9B4B,mBAAmBsC,UAAY,kBAAoBT,OAAOU,UAAUpB,aA/HhE"}