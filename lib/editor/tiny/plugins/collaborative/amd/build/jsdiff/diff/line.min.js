define("tiny_collaborative/jsdiff/diff/line",["exports","./base","../util/params"],(function(_exports,_base,_params){var e;Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.diffLines=function(oldStr,newStr,callback){return lineDiff.diff(oldStr,newStr,callback)},_exports.diffTrimmedLines=function(oldStr,newStr,callback){let options=(0,_params.generateOptions)(callback,{ignoreWhitespace:!0});return lineDiff.diff(oldStr,newStr,options)},_exports.lineDiff=void 0,_base=(e=_base)&&e.__esModule?e:{default:e};const lineDiff=_exports.lineDiff=new _base.default;lineDiff.tokenize=function(value,options){options.stripTrailingCr&&(value=value.replace(/\r\n/g,"\n"));let retLines=[],linesAndNewlines=value.split(/(\n|\r\n)/);linesAndNewlines[linesAndNewlines.length-1]||linesAndNewlines.pop();for(let i=0;i<linesAndNewlines.length;i++){let line=linesAndNewlines[i];i%2&&!options.newlineIsToken?retLines[retLines.length-1]+=line:retLines.push(line)}return retLines},lineDiff.equals=function(left,right,options){return options.ignoreWhitespace?(options.newlineIsToken&&left.includes("\n")||(left=left.trim()),options.newlineIsToken&&right.includes("\n")||(right=right.trim())):options.ignoreNewlineAtEof&&!options.newlineIsToken&&(left.endsWith("\n")&&(left=left.slice(0,-1)),right.endsWith("\n")&&(right=right.slice(0,-1))),_base.default.prototype.equals.call(this,left,right,options)}}));

//# sourceMappingURL=line.min.js.map