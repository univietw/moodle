define("tiny_collaborative/jsdiff/diff/word",["exports","./base","../util/string"],(function(_exports,_base,_string){var e;Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.diffWords=function(oldStr,newStr,options){if(null!=options?.ignoreWhitespace&&!options.ignoreWhitespace)return diffWordsWithSpace(oldStr,newStr,options);return wordDiff.diff(oldStr,newStr,options)},_exports.diffWordsWithSpace=diffWordsWithSpace,_exports.wordWithSpaceDiff=_exports.wordDiff=void 0,_base=(e=_base)&&e.__esModule?e:{default:e};const extendedWordChars="a-zA-Z\\u{C0}-\\u{FF}\\u{D8}-\\u{F6}\\u{F8}-\\u{2C6}\\u{2C8}-\\u{2D7}\\u{2DE}-\\u{2FF}\\u{1E00}-\\u{1EFF}",tokenizeIncludingWhitespace=new RegExp(`[${extendedWordChars}]+|\\s+|[^${extendedWordChars}]`,"ug"),wordDiff=_exports.wordDiff=new _base.default;function dedupeWhitespaceInChangeObjects(startKeep,deletion,insertion,endKeep){if(deletion&&insertion){const oldWsPrefix=deletion.value.match(/^\s*/)[0],oldWsSuffix=deletion.value.match(/\s*$/)[0],newWsPrefix=insertion.value.match(/^\s*/)[0],newWsSuffix=insertion.value.match(/\s*$/)[0];if(startKeep){const commonWsPrefix=(0,_string.longestCommonPrefix)(oldWsPrefix,newWsPrefix);startKeep.value=(0,_string.replaceSuffix)(startKeep.value,newWsPrefix,commonWsPrefix),deletion.value=(0,_string.removePrefix)(deletion.value,commonWsPrefix),insertion.value=(0,_string.removePrefix)(insertion.value,commonWsPrefix)}if(endKeep){const commonWsSuffix=(0,_string.longestCommonSuffix)(oldWsSuffix,newWsSuffix);endKeep.value=(0,_string.replacePrefix)(endKeep.value,newWsSuffix,commonWsSuffix),deletion.value=(0,_string.removeSuffix)(deletion.value,commonWsSuffix),insertion.value=(0,_string.removeSuffix)(insertion.value,commonWsSuffix)}}else if(insertion)startKeep&&(insertion.value=insertion.value.replace(/^\s*/,"")),endKeep&&(endKeep.value=endKeep.value.replace(/^\s*/,""));else if(startKeep&&endKeep){const newWsFull=endKeep.value.match(/^\s*/)[0],delWsStart=deletion.value.match(/^\s*/)[0],delWsEnd=deletion.value.match(/\s*$/)[0],newWsStart=(0,_string.longestCommonPrefix)(newWsFull,delWsStart);deletion.value=(0,_string.removePrefix)(deletion.value,newWsStart);const newWsEnd=(0,_string.longestCommonSuffix)((0,_string.removePrefix)(newWsFull,newWsStart),delWsEnd);deletion.value=(0,_string.removeSuffix)(deletion.value,newWsEnd),endKeep.value=(0,_string.replacePrefix)(endKeep.value,newWsFull,newWsEnd),startKeep.value=(0,_string.replaceSuffix)(startKeep.value,newWsFull,newWsFull.slice(0,newWsFull.length-newWsEnd.length))}else if(endKeep){const endKeepWsPrefix=endKeep.value.match(/^\s*/)[0],deletionWsSuffix=deletion.value.match(/\s*$/)[0],overlap=(0,_string.maximumOverlap)(deletionWsSuffix,endKeepWsPrefix);deletion.value=(0,_string.removeSuffix)(deletion.value,overlap)}else if(startKeep){const startKeepWsSuffix=startKeep.value.match(/\s*$/)[0],deletionWsPrefix=deletion.value.match(/^\s*/)[0],overlap=(0,_string.maximumOverlap)(startKeepWsSuffix,deletionWsPrefix);deletion.value=(0,_string.removePrefix)(deletion.value,overlap)}}wordDiff.equals=function(left,right,options){return options.ignoreCase&&(left=left.toLowerCase(),right=right.toLowerCase()),left.trim()===right.trim()},wordDiff.tokenize=function(value){let parts,options=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(options.intlSegmenter){if("word"!=options.intlSegmenter.resolvedOptions().granularity)throw new Error('The segmenter passed must have a granularity of "word"');parts=Array.from(options.intlSegmenter.segment(value),(segment=>segment.segment))}else parts=value.match(tokenizeIncludingWhitespace)||[];const tokens=[];let prevPart=null;return parts.forEach((part=>{/\s/.test(part)?null==prevPart?tokens.push(part):tokens.push(tokens.pop()+part):/\s/.test(prevPart)?tokens[tokens.length-1]==prevPart?tokens.push(tokens.pop()+part):tokens.push(prevPart+part):tokens.push(part),prevPart=part})),tokens},wordDiff.join=function(tokens){return tokens.map(((token,i)=>0==i?token:token.replace(/^\s+/,""))).join("")},wordDiff.postProcess=function(changes,options){if(!changes||options.oneChangePerToken)return changes;let lastKeep=null,insertion=null,deletion=null;return changes.forEach((change=>{change.added?insertion=change:change.removed?deletion=change:((insertion||deletion)&&dedupeWhitespaceInChangeObjects(lastKeep,deletion,insertion,change),lastKeep=change,insertion=null,deletion=null)})),(insertion||deletion)&&dedupeWhitespaceInChangeObjects(lastKeep,deletion,insertion,null),changes};const wordWithSpaceDiff=_exports.wordWithSpaceDiff=new _base.default;function diffWordsWithSpace(oldStr,newStr,options){return wordWithSpaceDiff.diff(oldStr,newStr,options)}wordWithSpaceDiff.tokenize=function(value){const regex=new RegExp(`(\\r?\\n)|[${extendedWordChars}]+|[^\\S\\n\\r]+|[^${extendedWordChars}]`,"ug");return value.match(regex)||[]}}));

//# sourceMappingURL=word.min.js.map