define("tiny_collaborative/jsdiff/patch/parse",["exports"],(function(_exports){Object.defineProperty(_exports,"__esModule",{value:!0}),_exports.parsePatch=function(uniDiff){let diffstr=uniDiff.split(/\n/),list=[],i=0;function parseIndex(){let index={};for(list.push(index);i<diffstr.length;){let line=diffstr[i];if(/^(\-\-\-|\+\+\+|@@)\s/.test(line))break;let header=/^(?:Index:|diff(?: -r \w+)+)\s+(.+?)\s*$/.exec(line);header&&(index.index=header[1]),i++}for(parseFileHeader(index),parseFileHeader(index),index.hunks=[];i<diffstr.length;){let line=diffstr[i];if(/^(Index:\s|diff\s|\-\-\-\s|\+\+\+\s|===================================================================)/.test(line))break;if(/^@@/.test(line))index.hunks.push(parseHunk());else{if(line)throw new Error("Unknown line "+(i+1)+" "+JSON.stringify(line));i++}}}function parseFileHeader(index){const fileHeader=/^(---|\+\+\+)\s+(.*)\r?$/.exec(diffstr[i]);if(fileHeader){let keyPrefix="---"===fileHeader[1]?"old":"new";const data=fileHeader[2].split("\t",2);let fileName=data[0].replace(/\\\\/g,"\\");/^".*"$/.test(fileName)&&(fileName=fileName.substr(1,fileName.length-2)),index[keyPrefix+"FileName"]=fileName,index[keyPrefix+"Header"]=(data[1]||"").trim(),i++}}function parseHunk(){let chunkHeaderIndex=i,chunkHeader=diffstr[i++].split(/@@ -(\d+)(?:,(\d+))? \+(\d+)(?:,(\d+))? @@/),hunk={oldStart:+chunkHeader[1],oldLines:void 0===chunkHeader[2]?1:+chunkHeader[2],newStart:+chunkHeader[3],newLines:void 0===chunkHeader[4]?1:+chunkHeader[4],lines:[]};0===hunk.oldLines&&(hunk.oldStart+=1),0===hunk.newLines&&(hunk.newStart+=1);let addCount=0,removeCount=0;for(;i<diffstr.length&&(removeCount<hunk.oldLines||addCount<hunk.newLines||diffstr[i]?.startsWith("\\"));i++){let operation=0==diffstr[i].length&&i!=diffstr.length-1?" ":diffstr[i][0];if("+"!==operation&&"-"!==operation&&" "!==operation&&"\\"!==operation)throw new Error(`Hunk at line ${chunkHeaderIndex+1} contained invalid line ${diffstr[i]}`);hunk.lines.push(diffstr[i]),"+"===operation?addCount++:"-"===operation?removeCount++:" "===operation&&(addCount++,removeCount++)}if(addCount||1!==hunk.newLines||(hunk.newLines=0),removeCount||1!==hunk.oldLines||(hunk.oldLines=0),addCount!==hunk.newLines)throw new Error("Added line count did not match for hunk at line "+(chunkHeaderIndex+1));if(removeCount!==hunk.oldLines)throw new Error("Removed line count did not match for hunk at line "+(chunkHeaderIndex+1));return hunk}for(;i<diffstr.length;)parseIndex();return list}}));

//# sourceMappingURL=parse.min.js.map