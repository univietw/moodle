{"version":3,"file":"distance-iterator.min.js","sources":["../../../src/jsdiff/util/distance-iterator.js"],"sourcesContent":["// Iterator that traverses in the range of [min, max], stepping\n// by distance from a given start position. I.e. for [0, 4], with\n// start of 2, this will iterate 2, 3, 1, 4, 0.\nexport default function(start, minLine, maxLine) {\n  let wantForward = true,\n      backwardExhausted = false,\n      forwardExhausted = false,\n      localOffset = 1;\n\n  return function iterator() {\n    if (wantForward && !forwardExhausted) {\n      if (backwardExhausted) {\n        localOffset++;\n      } else {\n        wantForward = false;\n      }\n\n      // Check if trying to fit beyond text length, and if not, check it fits\n      // after offset location (or desired location on first iteration)\n      if (start + localOffset <= maxLine) {\n        return start + localOffset;\n      }\n\n      forwardExhausted = true;\n    }\n\n    if (!backwardExhausted) {\n      if (!forwardExhausted) {\n        wantForward = true;\n      }\n\n      // Check if trying to fit before text beginning, and if not, check it fits\n      // before offset location\n      if (minLine <= start - localOffset) {\n        return start - localOffset++;\n      }\n\n      backwardExhausted = true;\n      return iterator();\n    }\n\n    // We tried to fit hunk before text beginning and beyond text length, then\n    // hunk can't fit on the text. Return undefined\n  };\n}\n"],"names":["start","minLine","maxLine","wantForward","backwardExhausted","forwardExhausted","localOffset","iterator"],"mappings":"mLAGwBA,MAAOC,QAASC,aAClCC,aAAc,EACdC,mBAAoB,EACpBC,kBAAmB,EACnBC,YAAc,SAEX,SAASC,cACVJ,cAAgBE,iBAAkB,IAChCD,kBACFE,cAEAH,aAAc,EAKZH,MAAQM,aAAeJ,eAClBF,MAAQM,YAGjBD,kBAAmB,MAGhBD,yBACEC,mBACHF,aAAc,GAKZF,SAAWD,MAAQM,YACdN,MAAQM,eAGjBF,mBAAoB,EACbG"}